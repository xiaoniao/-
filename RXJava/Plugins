
Plugins allow you to modify the default behavior of RxJava in several respects: 在这几个方面

  1、by changing the set of default computation, i/o, and new thread Schedulers
  2、by registering a handler for extraordinary errors that RxJava may encounter
  3、by registering functions that can take note of the occurrence of several regular RxJava activities

Plugins允许你修改RxJava的默认行为，比如
  修改默认的Schedulers
  注入方法来实现错误处理
  注册函数来观察RxJava一些方法的变化


--RxJavaSchedulersHook

RxJavaSchedulersHook允许你覆写默认的Schedulers,通过指定一个新的Schedulers

This plugin allows you to override the default computation, i/o, and new thread Schedulers with Schedulers of your choosing.
To do this, extend the class RxJavaSchedulersHook and override these methods: 如果这么做需要重写这四个方法

  1、Scheduler getComputationScheduler( )
  2、Scheduler getIOScheduler( )
  3、Scheduler getNewThreadScheduler( )
  4、Action0 onSchedule(action) @Deprecated

Then follow these steps:

  1、Create an object of the new RxJavaDefaultSchedulers subclass you have implemented.
  2、Obtain the global RxJavaPlugins instance via RxJavaPlugins.getInstance( ).
  3、Pass your default schedulers object to the registerSchedulersHook( ) method of that instance.

When you do this, RxJava will begin to use the Schedulers returned by your methods rather than its built-in defaults.



--RxJavaErrorHandler

This plugin allows you to register a function that will handle errors that are passed to Subscriber.onError(Throwable).
To do this, extend the class RxJavaErrorHandler and override this method:

  1、void handleError(Throwable e)

Then follow these steps:

  1、Create an object of the new RxJavaErrorHandler subclass you have implemented.
  2、Obtain the global RxJavaPlugins instance via RxJavaPlugins.getInstance( ).
  3、Pass your error handler object to the registerErrorHandler( ) method of that instance.

When you do this, RxJava will begin to use your error handler to field errors that are passed to Subscriber.onError(Throwable).


--RxJavaObservableExecutionHook

This plugin allows you to register functions that RxJava will call upon certain regular RxJava activities, for instance for logging or metrics-collection purposes.
To do this, extend the class RxJavaObservableExecutionHook and override any or all of these methods:


       method	      |        when invoked
onCreate( )	           during Observable.create( )
onSubscribeStart( )	   immediately before Observable.subscribe( )
onSubscribeReturn( )	 immediately after Observable.subscribe( )
onSubscribeError( )	   upon a failed execution of Observable.subscribe( )
onLift( )	             during Observable.lift( )

Then follow these steps:

1、Create an object of the new RxJavaObservableExecutionHook subclass you have implemented.
2、Obtain the global RxJavaPlugins instance via RxJavaPlugins.getInstance( ).
3、Pass your execution hooks object to the registerObservableExecutionHook( ) method of that instance.

When you do this, RxJava will begin to call your functions when it encounters the specific
conditions they were designed to take note of.





  。
